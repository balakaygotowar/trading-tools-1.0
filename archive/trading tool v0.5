{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1.1. Import Libraries"],"metadata":{"id":"jUhTZZW7KvSu"}},{"cell_type":"markdown","source":["# to do\n","\n","\n","1.   figure out how claude is able to create cell blocks\n","2.   are the cell blocks that were added necessary?\n","3. is there a way to specify the directory to the trading tools project? how to do this when the file is opened? how to do this for Sean's path? for my path?\n","\n"],"metadata":{"id":"_Af4eSDt4FHg"}},{"cell_type":"code","source":["!npm install -g @anthropic-ai/claude-code"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"peZ2daND3v2n","executionInfo":{"status":"ok","timestamp":1752243856420,"user_tz":240,"elapsed":4962,"user":{"displayName":"Blake Kelly","userId":"16528286487670311282"}},"outputId":"bd57599c-2cb1-4934-e28f-f6acd87b5dc1"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K⠦\u001b[1G\u001b[0K⠧\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K⠏\u001b[1G\u001b[0K⠋\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K⠦\u001b[1G\u001b[0K⠧\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K⠏\u001b[1G\u001b[0K⠋\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K⠦\u001b[1G\u001b[0K⠧\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K⠏\u001b[1G\u001b[0K⠋\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K⠦\u001b[1G\u001b[0K⠧\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K⠏\u001b[1G\u001b[0K⠋\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K⠦\u001b[1G\u001b[0K⠧\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K\n","added 3 packages in 5s\n","\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K\n","\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K2 packages are looking for funding\n","\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K  run `npm fund` for details\n","\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"W6qZMUFa2d1J","executionInfo":{"status":"ok","timestamp":1752243518900,"user_tz":240,"elapsed":19936,"user":{"displayName":"Blake Kelly","userId":"16528286487670311282"}},"outputId":"ee8c95f4-9d22-4a9c-bf2d-6adfc6dda05a","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"34JSIPpwGZmF","executionInfo":{"status":"ok","timestamp":1733109270925,"user_tz":300,"elapsed":7592,"user":{"displayName":"Blake Kelly","userId":"16528286487670311282"}},"outputId":"b193048d-23cd-41b8-c8a3-f8be09f04d64"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.10/dist-packages (2.151.0)\n","Collecting google-api-python-client\n","  Downloading google_api_python_client-2.154.0-py2.py3-none-any.whl.metadata (6.7 kB)\n","Requirement already satisfied: google-auth-httplib2 in /usr/local/lib/python3.10/dist-packages (0.2.0)\n","Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.10/dist-packages (1.2.1)\n","Requirement already satisfied: httplib2<1.dev0,>=0.19.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (0.22.0)\n","Requirement already satisfied: google-auth!=2.24.0,!=2.25.0,<3.0.0.dev0,>=1.32.0 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (2.27.0)\n","Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (2.19.2)\n","Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (4.1.1)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib) (1.3.1)\n","Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (1.66.0)\n","Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0.dev0,>=3.19.5 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (4.25.5)\n","Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (1.25.0)\n","Requirement already satisfied: requests<3.0.0.dev0,>=2.18.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2.32.3)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0.dev0,>=1.32.0->google-api-python-client) (5.5.0)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0.dev0,>=1.32.0->google-api-python-client) (0.4.1)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0.dev0,>=1.32.0->google-api-python-client) (4.9)\n","Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2<1.dev0,>=0.19.0->google-api-python-client) (3.2.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib) (3.2.2)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth!=2.24.0,!=2.25.0,<3.0.0.dev0,>=1.32.0->google-api-python-client) (0.6.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2024.8.30)\n","Downloading google_api_python_client-2.154.0-py2.py3-none-any.whl (12.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.6/12.6 MB\u001b[0m \u001b[31m73.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: google-api-python-client\n","  Attempting uninstall: google-api-python-client\n","    Found existing installation: google-api-python-client 2.151.0\n","    Uninstalling google-api-python-client-2.151.0:\n","      Successfully uninstalled google-api-python-client-2.151.0\n","Successfully installed google-api-python-client-2.154.0\n"]}],"source":["# Standard libraries\n","import os\n","import sys\n","\n","# Data manipulation\n","import pandas as pd\n","import numpy as np\n","\n","# Google API libraries\n","!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib\n","from google.colab import auth\n","from googleapiclient.discovery import build\n","from google.oauth2 import service_account\n","\n","# For handling configuration files\n","import json"]},{"cell_type":"markdown","source":["## 1.2. Authenticate with Google APIs"],"metadata":{"id":"gJG7u_2_JHAy"}},{"cell_type":"code","source":["# Authenticate the user\n","auth.authenticate_user()\n","\n","# Build the Drive and Sheets services\n","from googleapiclient.discovery import build\n","drive_service = build('drive', 'v3')\n","sheets_service = build('sheets', 'v4')"],"metadata":{"id":"TLpfmrKiG1iM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Step 2: ConfigurationManager Class"],"metadata":{"id":"lNjctBnlJEAV"}},{"cell_type":"code","source":["# Import necessary libraries\n","from googleapiclient.discovery import build\n","from google.colab import auth\n","\n","class ConfigurationManager:\n","    def __init__(self, sheets_service, spreadsheet_id='1br2_tagQRatoGaBoAttzvRqAyT3XNiu5rz0KHt2OR_Q'):\n","        \"\"\"\n","        Initialize ConfigurationManager with Google Sheets service and spreadsheet ID.\n","        \"\"\"\n","        self.spreadsheet_id = spreadsheet_id\n","        self.config = {}\n","        self.sheets_service = sheets_service\n","        self.load_configuration()\n","        self.check_missing_settings()\n","\n","    def load_configuration(self):\n","        try:\n","            # Define the range for configuration settings\n","            range_name = 'config!A:B'  # Settings are in columns A and B\n","\n","            # Fetch the configuration from Google Sheets\n","            result = self.sheets_service.spreadsheets().values().get(\n","                spreadsheetId=self.spreadsheet_id,\n","                range=range_name\n","            ).execute()\n","            values = result.get('values', [])\n","\n","            if not values:\n","                print(\"No configuration data found in Google Sheets. Creating default configuration.\")\n","                self.create_default_configuration()\n","                return\n","\n","            # Convert the fetched data into a dictionary\n","            self.config = {row[0]: self._parse_value(row[1]) for row in values if len(row) >= 2}\n","            print(\"Configuration loaded successfully from Google Sheets.\")\n","        except Exception as e:\n","            print(f\"Error loading configuration from Google Sheets: {e}\")\n","            self.create_default_configuration()\n","\n","    def is_backtesting_enabled(self, strategy):\n","        # Determine if backtesting is enabled for a given strategy\n","        return strategy.get('Run Backtesting', 'False').strip().lower() == 'true'\n","\n","    def is_live_trading_enabled(self, strategy):\n","        # Determine if live trading is enabled for a given strategy\n","        return strategy.get('Run Live Trades', 'False').strip().lower() == 'true'\n","\n","    def is_paper_trading_enabled(self, strategy):\n","        # Determine if paper trading is enabled for a given strategy\n","        return strategy.get('Run Paper Trades', 'False').strip().lower() == 'true'\n","\n","    def get_active_strategies(self, mode):\n","        try:\n","            # Define the range for strategy details\n","            range_name = 'strategy detail!A:E'  # Assuming columns: Strategy Name, Description, Run Backtesting, Run Paper Trades, Run Live Trades\n","\n","            # Fetch the strategy details from Google Sheets\n","            result = self.sheets_service.spreadsheets().values().get(\n","                spreadsheetId=self.spreadsheet_id,\n","                range=range_name\n","            ).execute()\n","            values = result.get('values', [])\n","\n","            if not values:\n","                print(\"No strategy details found in Google Sheets.\")\n","                return []\n","\n","            # Assuming first row is headers\n","            headers = values[0]\n","            strategy_data = values[1:]\n","\n","            active_strategies = []\n","            for row in strategy_data:\n","                if len(row) < 5:\n","                    # Handle incomplete rows\n","                    continue\n","                strategy_dict = dict(zip(headers, row))\n","                run_backtesting = strategy_dict.get('Run Backtesting', 'False').strip().lower() == 'true'\n","                run_live_trading = strategy_dict.get('Run Live Trades', 'False').strip().lower() == 'true'\n","                run_paper_trades = strategy_dict.get('Run Paper Trades', 'False').strip().lower() == 'true'\n","\n","                # Depending on the mode, check if the strategy should be active\n","                if mode == 'backtesting' and run_backtesting:\n","                    active_strategies.append(strategy_dict)\n","                elif mode == 'live_trading' and run_live_trading:\n","                    active_strategies.append(strategy_dict)\n","                elif mode == 'paper_trading' and run_paper_trades:\n","                    active_strategies.append(strategy_dict)\n","\n","            return active_strategies\n","        except Exception as e:\n","            print(f\"Error fetching active strategies from Google Sheets: {e}\")\n","            return []\n","\n","    def get_setting(self, setting_name):\n","        return self.config.get(setting_name, None)\n"],"metadata":{"id":"s_mDVLIQZ8PD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 2.2. Test the ConfigurationManager"],"metadata":{"id":"wJgRlbOPJaXD"}},{"cell_type":"code","source":["config_manager = ConfigurationManager(sheets_service)\n","\n","# Fetch and print general settings\n","trailing_days = config_manager.get_setting('price history trailing days to fetch new data')\n","print(\"Price History Trailing Days:\", trailing_days)\n","\n","# Fetch and print active strategies for backtesting\n","active_backtesting_strategies = config_manager.get_active_strategies('backtesting')\n","print(\"Active Backtesting Strategies:\", active_backtesting_strategies)\n","\n","# Fetch and print active strategies for live trading\n","active_live_trading_strategies = config_manager.get_active_strategies('live_trading')\n","print(\"Active Live Trading Strategies:\", active_live_trading_strategies)\n","\n","# Fetch and print active strategies for paper trading\n","active_paper_trading_strategies = config_manager.get_active_strategies('paper_trading')\n","print(\"Active Paper Trading Strategies:\", active_paper_trading_strategies)"],"metadata":{"id":"o7MZ4y3JJdWK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733109299410,"user_tz":300,"elapsed":2098,"user":{"displayName":"Blake Kelly","userId":"16528286487670311282"}},"outputId":"3574295a-44f2-44e1-c4a0-11770eb18c12"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Configuration loaded successfully from Google Sheets.\n","Price History Trailing Days: 30\n","Active Backtesting Strategies: [{'Strategy Name': 'RSI daily highs and lows reactive trades', 'description': 'sells when RSI hits 70 and buys when RSI hits 30', 'Run Backtesting': 'TRUE', 'Run Paper Trades': 'TRUE', 'Run Live Trades': 'FALSE'}]\n","Active Live Trading Strategies: []\n","Active Paper Trading Strategies: [{'Strategy Name': 'RSI daily highs and lows reactive trades', 'description': 'sells when RSI hits 70 and buys when RSI hits 30', 'Run Backtesting': 'TRUE', 'Run Paper Trades': 'TRUE', 'Run Live Trades': 'FALSE'}]\n"]}]},{"cell_type":"markdown","source":["# Step 3: GoogleAPIAuthenticator Class"],"metadata":{"id":"8iUPxgxJJgOA"}},{"cell_type":"code","source":["# Define the GoogleAPIAuthenticator class\n","class GoogleAPIAuthenticator:\n","    def __init__(self):\n","        self.drive_service = None\n","        self.sheets_service = None\n","        self.authenticate_google_apis()\n","\n","    def authenticate_google_apis(self):\n","        # Authentication handled globally in Colab, so we just build the services\n","        self.drive_service = build('drive', 'v3')\n","        self.sheets_service = build('sheets', 'v4')\n","        print(\"Google APIs authenticated and services built.\")"],"metadata":{"id":"MZXX81oBJh3w"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["3.1. Test the GoogleAPIAuthenticator"],"metadata":{"id":"7ZNcy_EHKfQ2"}},{"cell_type":"code","source":["google_auth = GoogleAPIAuthenticator()\n","# List files in Google Drive to test\n","results = google_auth.drive_service.files().list(pageSize=10).execute()\n","items = results.get('files', [])\n","if not items:\n","    print('No files found.')\n","else:\n","    print('Files:')\n","    for item in items:\n","        print(u'{0} ({1})'.format(item['name'], item['id']))"],"metadata":{"id":"lKl5HRHuKhRy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733109300809,"user_tz":300,"elapsed":1400,"user":{"displayName":"Blake Kelly","userId":"16528286487670311282"}},"outputId":"f39d1a47-f042-44a4-9374-3abf60f03f0a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Google APIs authenticated and services built.\n","Files:\n","trading tool v0.5 (1dE2GGn2ZdsroWcSahZ854mhHHjXg_NWW)\n","Dwayne Bryant: Plays Since 2018 (1m3Cqi-26mDCtz929iJcpkKcNb9wHu-590Ltzpdy0f5w)\n","IDD prompt builder (1wyrrQjje4I5fIQglt_EZpOLggYe0vsx4dVGTLU2TcJA)\n","Price History (1p36Mwm3Q7r0hRLh2DqUqBvInorsnm6ZcDhKbiE74od0)\n","Python Configuration Settings (1br2_tagQRatoGaBoAttzvRqAyT3XNiu5rz0KHt2OR_Q)\n","trading tool documentation.txt (1YXtUH2FIB-LV4hhRQpFcfyXG8dFPpbrX)\n","trading tool documentation (1ZAfMNlazG7-71yk9KX_vL5lxMiPGGIodL9R85cI0UPQ)\n","llm prompts (16LRJnihWLRZGm_bJ1u7t9529hp308en0)\n","Grandma passwords (1-7sIokPpB6y-vLLAb4cF3Mim3q9NUaMzJ_CPUlm1yxc)\n","Work sesh thanksgiving 2024 (11EBTEU6fH5OCfwj1fqjv-rS81TOWzkDKhwp--1SQWMk)\n"]}]},{"cell_type":"markdown","source":["# Step 4: DataRetriever Class"],"metadata":{"id":"tr0OB_2qKkaj"}},{"cell_type":"code","source":["import requests\n","import time\n","import random\n","from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type\n","\n","class RateLimitException(Exception):\n","    pass\n","\n","class DataRetriever:\n","    def __init__(self, google_authenticator, config_manager):\n","        self.drive_service = google_authenticator.drive_service\n","        self.sheets_service = google_authenticator.sheets_service\n","        self.config_manager = config_manager\n","        self.session = requests.Session()\n","        self.asset_details = self.load_asset_details()\n","\n","    def load_asset_details(self):\n","        try:\n","            range_name = 'asset detail!A:C'  # Columns: Asset Ticker, CoinGecko ID, Get Price Data\n","            result = self.sheets_service.spreadsheets().values().get(\n","                spreadsheetId=self.config_manager.spreadsheet_id,\n","                range=range_name\n","            ).execute()\n","            values = result.get('values', [])\n","            if not values:\n","                print(\"No asset details found in Google Sheets.\")\n","                return []\n","            headers = values[0]\n","            asset_data = values[1:]\n","            asset_details = []\n","            for row in asset_data:\n","                if len(row) < 3:\n","                    continue  # Skip incomplete rows\n","                asset = {\n","                    'ticker': row[0].strip(),\n","                    'coingecko_id': row[1].strip(),\n","                    'get_price_data': row[2].strip().lower() == 'true'\n","                }\n","                asset_details.append(asset)\n","            print(\"Asset details loaded successfully from Google Sheets.\")\n","            return asset_details\n","        except Exception as e:\n","            print(f\"Error loading asset details: {e}\")\n","            return []\n","\n","    def fetch_all_price_data(self):\n","        all_data = pd.DataFrame()\n","        for asset in self.asset_details:\n","            if asset['get_price_data']:\n","                df = self.fetch_api_price_data(asset)\n","                if not df.empty:\n","                    all_data = pd.concat([all_data, df], ignore_index=True)\n","            else:\n","                print(f\"Skipping asset {asset['ticker']} as 'get_price_data' is False.\")\n","        return all_data\n","\n","    @retry(stop=stop_after_attempt(5), wait=wait_exponential(multiplier=1, min=2, max=10), retry=retry_if_exception_type(RateLimitException))\n","    def fetch_api_price_data(self, asset):\n","        asset_symbol = asset['ticker']\n","        crypto_id = asset['coingecko_id']\n","        if not crypto_id:\n","            print(f\"Asset {asset_symbol} does not have a CoinGecko ID.\")\n","            return pd.DataFrame()\n","\n","        vs_currency = 'usd'\n","        days = self.config_manager.config.get('price history trailing days to fetch new data', '30')\n","\n","        url = f'https://api.coingecko.com/api/v3/coins/{crypto_id}/market_chart'\n","        params = {'vs_currency': vs_currency, 'days': days}\n","\n","        try:\n","            response = self.session.get(url, params=params)\n","            if response.status_code == 200:\n","                data = response.json()\n","                prices = data['prices']\n","                df = pd.DataFrame(prices, columns=['timestamp', 'price'])\n","                df['Date'] = pd.to_datetime(df['timestamp'], unit='ms').dt.date\n","                df['Asset'] = asset_symbol.upper()\n","                df = df[['Date', 'Asset', 'price']]\n","                df.rename(columns={'price': 'Close'}, inplace=True)\n","                return df\n","            elif response.status_code == 429:\n","                print(\"Rate limit exceeded. Raising exception for retry.\")\n","                raise RateLimitException(\"Rate limit exceeded.\")\n","            else:\n","                print(f\"Error fetching data for {asset_symbol}: {response.status_code}\")\n","                return pd.DataFrame()\n","        except RateLimitException as e:\n","            raise e\n","        except Exception as e:\n","            print(f\"Error fetching data for {asset_symbol}: {e}\")\n","            return pd.DataFrame()\n"],"metadata":{"id":"noIL6SzPbj9Y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 4.2. Test the DataRetriever"],"metadata":{"id":"2agyb0BTMaLb"}},{"cell_type":"code","source":["from google.colab import auth\n","from googleapiclient.discovery import build\n","import pandas as pd\n","\n","# Authenticate with Google APIs\n","auth.authenticate_user()\n","sheets_service = build('sheets', 'v4')\n","\n","# Mock GoogleAPIAuthenticator\n","class MockGoogleAuthenticator:\n","    def __init__(self, sheets_service):\n","        self.sheets_service = sheets_service\n","        self.drive_service = None  # Not used in this demonstration\n","\n","# Mock ConfigurationManager with necessary attributes\n","class MockConfigManager:\n","    def __init__(self, spreadsheet_id):\n","        self.spreadsheet_id = spreadsheet_id\n","        self.config = {\"price history trailing days to fetch new data\": \"30\"}\n","\n","# Instantiate mock objects with the correct spreadsheet ID\n","google_authenticator = MockGoogleAuthenticator(sheets_service)\n","config_manager = MockConfigManager(spreadsheet_id='1br2_tagQRatoGaBoAttzvRqAyT3XNiu5rz0KHt2OR_Q')  # Correct ID from py1\n","\n","# Instantiate DataRetriever\n","data_retriever = DataRetriever(google_authenticator, config_manager)\n","\n","# Fetch all price data for assets\n","try:\n","    all_price_data = data_retriever.fetch_all_price_data()\n","    print(all_price_data.head())  # Display results\n","except Exception as e:\n","    print(f\"Error during data retrieval: {e}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"26kxRNr0dXNf","executionInfo":{"status":"error","timestamp":1733112444674,"user_tz":300,"elapsed":15150,"user":{"displayName":"Blake Kelly","userId":"16528286487670311282"}},"outputId":"d63286c2-1325-4e1e-a304-f7f5eb887674"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Asset details loaded successfully from Google Sheets.\n","Rate limit exceeded. Raising exception for retry.\n","Rate limit exceeded. Raising exception for retry.\n","Rate limit exceeded. Raising exception for retry.\n","Rate limit exceeded. Raising exception for retry.\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-4d091f779496>\u001b[0m in \u001b[0;36m<cell line: 29>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;31m# Fetch all price data for assets\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m     \u001b[0mall_price_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata_retriever\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch_all_price_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_price_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Display results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-9-a5db738b93ac>\u001b[0m in \u001b[0;36mfetch_all_price_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     48\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0masset\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masset_details\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0masset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'get_price_data'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m                 \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch_api_price_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0masset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempty\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m                     \u001b[0mall_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tenacity/__init__.py\u001b[0m in \u001b[0;36mwrapped_f\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    334\u001b[0m             \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m             \u001b[0mwrapped_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatistics\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatistics\u001b[0m  \u001b[0;31m# type: ignore[attr-defined]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 336\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    337\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mretry_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAny\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mWrappedFn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tenacity/__init__.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, fn, *args, **kwargs)\u001b[0m\n\u001b[1;32m    483\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDoSleep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m                 \u001b[0mretry_state\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprepare_for_next_attempt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 485\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    486\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    487\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mdo\u001b[0m  \u001b[0;31m# type: ignore[no-any-return]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tenacity/nap.py\u001b[0m in \u001b[0;36msleep\u001b[0;34m(seconds)\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0mThis\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mdefault\u001b[0m \u001b[0mstrategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mmay\u001b[0m \u001b[0mbe\u001b[0m \u001b[0mmocked\u001b[0m \u001b[0mout\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0munit\u001b[0m \u001b[0mtesting\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m     \"\"\"\n\u001b[0;32m---> 31\u001b[0;31m     \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseconds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["# Step 5: DataProcessor Class"],"metadata":{"id":"dBiq7ebZMeKv"}},{"cell_type":"code","source":["class DataProcessor:\n","    def __init__(self, data_retriever, google_authenticator):\n","        self.data_retriever = data_retriever\n","        self.drive_service = google_authenticator.drive_service\n","        self.sheets_service = google_authenticator.sheets_service\n","        self.spreadsheet_id = '1p36Mwm3Q7r0hRLh2DqUqBvInorsnm6ZcDhKbiE74od0'  # Replace with your actual spreadsheet ID\n","\n","    def calculate_indicators(self, asset_symbol):\n","        # Fetch data from Google Sheet\n","        sheet_name = 'Price History'\n","        try:\n","            result = self.sheets_service.spreadsheets().values().get(\n","                spreadsheetId=self.spreadsheet_id,\n","                range=f\"'{sheet_name}'!A:C\"\n","            ).execute()\n","            values = result.get('values', [])\n","            if len(values) < 2:\n","                print(f\"No data available for {asset_symbol} to calculate indicators.\")\n","                return\n","            df = pd.DataFrame(values[1:], columns=values[0])\n","            # Filter for the specific asset\n","            df = df[df['Asset'] == asset_symbol]\n","            if df.empty:\n","                print(f\"No data available for {asset_symbol} to calculate indicators.\")\n","                return\n","            df['Date'] = pd.to_datetime(df['Date'])\n","            df['Close'] = df['Close'].astype(float)\n","            # Calculate Moving Average (e.g., 10-day MA)\n","            df['MA10'] = df['Close'].rolling(window=10).mean()\n","            # Calculate Relative Strength Index (RSI)\n","            delta = df['Close'].diff()\n","            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()\n","            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()\n","            rs = gain / loss\n","            df['RSI'] = 100 - (100 / (1 + rs))\n","            # Save indicators back to Google Sheet or another storage\n","            # For demonstration, we'll print the latest indicators\n","            latest = df.iloc[-1]\n","            print(f\"Indicators for {asset_symbol} on {latest['Date'].date()}: MA10={latest['MA10']:.2f}, RSI={latest['RSI']:.2f}\")\n","        except Exception as e:\n","            print(f\"Error calculating indicators for {asset_symbol}: {e}\")\n","\n","\n","    def upsert_price_data(self, asset_symbol):\n","        # Fetch new data\n","        new_data = self.data_retriever.fetch_api_price_data(asset_symbol)\n","\n","        if not new_data.empty:\n","            sheet_name = 'Price History'\n","            try:\n","                # Fetch existing headers\n","                result = self.sheets_service.spreadsheets().values().get(\n","                    spreadsheetId=self.spreadsheet_id,\n","                    range=f\"'{sheet_name}'!1:1\"  # Only headers\n","                ).execute()\n","                headers = result.get('values', [])[0] if 'values' in result else []\n","                if not headers:\n","                    print(\"No headers found in Price History sheet. Creating default headers.\")\n","                    headers = ['Date', 'Asset', 'Close']\n","                    body = {'values': [headers]}\n","                    self.sheets_service.spreadsheets().values().update(\n","                        spreadsheetId=self.spreadsheet_id,\n","                        range=f\"'{sheet_name}'!A1\",\n","                        valueInputOption='RAW',\n","                        body=body\n","                    ).execute()\n","\n","                # Fetch existing data\n","                result = self.sheets_service.spreadsheets().values().get(\n","                    spreadsheetId=self.spreadsheet_id,\n","                    range=f\"'{sheet_name}'!A2:Z\"  # Assuming data starts from row 2\n","                ).execute()\n","                existing_values = result.get('values', [])\n","                if existing_values:\n","                    existing_data = pd.DataFrame(existing_values, columns=headers)\n","                    existing_data['Date'] = pd.to_datetime(existing_data['Date']).dt.date\n","                    existing_data['Asset'] = existing_data['Asset'].astype(str)\n","                    existing_data['Close'] = existing_data['Close'].astype(float)\n","                else:\n","                    existing_data = pd.DataFrame(columns=headers)\n","\n","            except Exception as e:\n","                print(f\"Error fetching existing data: {e}\")\n","                existing_data = pd.DataFrame(columns=headers)\n","\n","            # Combine existing data with new data\n","            combined_data = pd.concat([existing_data, new_data]).drop_duplicates(subset=['Date', 'Asset'], keep='last')\n","\n","            # Prepare data for writing\n","            combined_data.sort_values(by=['Date', 'Asset'], inplace=True)\n","            combined_data = combined_data[headers]  # Ensure column order matches headers\n","\n","            # Convert all data to string to prevent serialization issues\n","            combined_data = combined_data.fillna('')\n","            values = [headers] + combined_data.astype(str).values.tolist()\n","\n","            # Write combined data back to Google Sheet\n","            body = {'values': values}\n","            try:\n","                self.sheets_service.spreadsheets().values().update(\n","                    spreadsheetId=self.spreadsheet_id,\n","                    range=f\"'{sheet_name}'!A1\",\n","                    valueInputOption='RAW',\n","                    body=body\n","                ).execute()\n","                print(f\"Price data for {asset_symbol} upserted to Google Sheet successfully.\")\n","            except Exception as e:\n","                print(f\"Error writing data to Google Sheets: {e}\")\n","        else:\n","            print(f\"No data fetched for {asset_symbol}. Skipping update.\")\n","\n"],"metadata":{"id":"XTrpAyxxa8Gk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["5.2. Test the DataProcessor"],"metadata":{"id":"kb1EUrZFMmPM"}},{"cell_type":"code","source":["data_processor = DataProcessor(data_retriever, google_auth)\n","for asset in top_assets:\n","    data_processor.upsert_price_data(asset)\n","    data_processor.calculate_indicators(asset)"],"metadata":{"id":"bl73ZS8SMnps","colab":{"base_uri":"https://localhost:8080/","height":339},"executionInfo":{"status":"error","timestamp":1733092640488,"user_tz":300,"elapsed":1799,"user":{"displayName":"Blake Kelly","userId":"16528286487670311282"}},"outputId":"b90210f0-129b-46ce-b2f5-9816aced6eeb"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-3ccfc5ed93c1>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdata_processor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDataProcessor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_retriever\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgoogle_auth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0masset\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtop_assets\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mdata_processor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupsert_price_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0masset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mdata_processor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalculate_indicators\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0masset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-15-eba0c3ac5978>\u001b[0m in \u001b[0;36mupsert_price_data\u001b[0;34m(self, asset_symbol)\u001b[0m\n\u001b[1;32m     83\u001b[0m                 \u001b[0mvalueInputOption\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'RAW'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m                 \u001b[0mbody\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 85\u001b[0;31m             ).execute()\n\u001b[0m\u001b[1;32m     86\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Price data for {asset_symbol} upserted to Google Sheet successfully.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/googleapiclient/_helpers.py\u001b[0m in \u001b[0;36mpositional_wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    128\u001b[0m                 \u001b[0;32melif\u001b[0m \u001b[0mpositional_parameters_enforcement\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mPOSITIONAL_WARNING\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m                     \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 130\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mpositional_wrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/googleapiclient/http.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, http, num_retries)\u001b[0m\n\u001b[1;32m    921\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    922\u001b[0m         \u001b[0;31m# Handle retries for server-side errors.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 923\u001b[0;31m         resp, content = _retry_request(\n\u001b[0m\u001b[1;32m    924\u001b[0m             \u001b[0mhttp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    925\u001b[0m             \u001b[0mnum_retries\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/googleapiclient/http.py\u001b[0m in \u001b[0;36m_retry_request\u001b[0;34m(http, num_retries, req_type, sleep, rand, uri, method, *args, **kwargs)\u001b[0m\n\u001b[1;32m    189\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m             \u001b[0mexception\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 191\u001b[0;31m             \u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhttp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    192\u001b[0m         \u001b[0;31m# Retry on SSL errors and socket timeout errors.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0m_ssl_SSLError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mssl_error\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google_auth_httplib2.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, uri, method, body, headers, redirections, connection_type, **kwargs)\u001b[0m\n\u001b[1;32m    216\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m         \u001b[0;31m# Make the request.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 218\u001b[0;31m         response, content = self.http.request(\n\u001b[0m\u001b[1;32m    219\u001b[0m             \u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    220\u001b[0m             \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/httplib2/__init__.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, uri, method, body, headers, redirections, connection_type)\u001b[0m\n\u001b[1;32m   1722\u001b[0m                     \u001b[0mcontent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mb\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1723\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1724\u001b[0;31m                     (response, content) = self._request(\n\u001b[0m\u001b[1;32m   1725\u001b[0m                         \u001b[0mconn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mauthority\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest_uri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mredirections\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcachekey\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1726\u001b[0m                     )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/httplib2/__init__.py\u001b[0m in \u001b[0;36m_request\u001b[0;34m(self, conn, host, absolute_uri, request_uri, method, body, headers, redirections, cachekey)\u001b[0m\n\u001b[1;32m   1442\u001b[0m             \u001b[0mauth\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest_uri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1444\u001b[0;31m         \u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontent\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_conn_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest_uri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1445\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1446\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mauth\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/httplib2/__init__.py\u001b[0m in \u001b[0;36m_conn_request\u001b[0;34m(self, conn, request_uri, method, body, headers)\u001b[0m\n\u001b[1;32m   1394\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1395\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1396\u001b[0;31m                 \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1397\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhttp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBadStatusLine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhttp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mResponseNotReady\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1398\u001b[0m                 \u001b[0;31m# If we get a BadStatusLine on the first try then that means\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1373\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1374\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1375\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1376\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1377\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    316\u001b[0m         \u001b[0;31m# read until we get a non-100 response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    317\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 318\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    319\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    320\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    277\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 279\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    280\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mLineTooLong\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"status line\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    703\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 705\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    706\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    707\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1301\u001b[0m                   \u001b[0;34m\"non-zero flags not allowed in calls to recv_into() on %s\"\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1302\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1303\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1304\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1305\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbuffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m   1157\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1158\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1159\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1160\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1161\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["# Step 6: StrategyManager Class"],"metadata":{"id":"xWbLH0pBMpnB"}},{"cell_type":"code","source":["class StrategyManager:\n","    def __init__(self, config_manager, data_processor):\n","        self.config_manager = config_manager\n","        self.data_processor = data_processor\n","\n","    def strategy_macd_confluence(self, data):\n","        # data is a DataFrame passed to the method\n","        # Calculate MACD\n","        exp1 = data['Close'].ewm(span=12, adjust=False).mean()\n","        exp2 = data['Close'].ewm(span=26, adjust=False).mean()\n","        data['MACD'] = exp1 - exp2\n","        data['Signal_Line'] = data['MACD'].ewm(span=9, adjust=False).mean()\n","\n","        # Generate signals\n","        data['Signal'] = 0\n","        data.loc[data['MACD'] > data['Signal_Line'], 'Signal'] = 1\n","        data.loc[data['MACD'] < data['Signal_Line'], 'Signal'] = -1\n","\n","        # Optionally save the data or return it\n","        # data.to_csv(filename, index=False)\n","        # print(\"MACD Confluence strategy applied.\")\n","\n","        return data  # Return the DataFrame with signals\n","\n","    def generate_order_signals(self, asset_symbol):\n","        # Placeholder for generating order signals based on strategies\n","        pass\n","\n","    def process_backtesting(self):\n","        if not self.config_manager.is_backtesting_enabled():\n","            return\n","        strategies = self.config_manager.get_active_strategies('backtesting')\n","        for strategy in strategies:\n","            asset = strategy.get('asset')\n","            self.strategy_macd_confluence(asset)\n","            # Implement backtesting logic here"],"metadata":{"id":"3-y6o2ttMsDC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["6.2. Test the StrategyManager"],"metadata":{"id":"4tLnGbnaM1-A"}},{"cell_type":"code","source":["strategy_manager = StrategyManager(config_manager, data_processor)\n","strategy_manager.process_backtesting()"],"metadata":{"id":"3yrcwO8bM8KV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Step 7: TradeExecutor Class\n","The TradeExecutor class handles the execution of trades through brokers like Alpaca or Interactive Brokers."],"metadata":{"id":"jJQHXRgGM_wy"}},{"cell_type":"code","source":["class TradeExecutor:\n","    def __init__(self, broker='alpaca', config_manager=None):\n","        self.broker = broker\n","        self.config_manager = config_manager\n","        if self.broker == 'alpaca':\n","            self.initialize_alpaca()\n","        elif self.broker == 'interactive_brokers':\n","            self.initialize_interactive_brokers()\n","        else:\n","            raise ValueError('Unsupported broker')\n","\n","    def initialize_alpaca(self):\n","        import alpaca_trade_api as tradeapi\n","        # Fetch API keys from configuration\n","        self.alpaca_api_key = self.config_manager.get_setting('alpaca_api_key')\n","        self.alpaca_secret_key = self.config_manager.get_setting('alpaca_secret_key')\n","        self.alpaca_base_url = self.config_manager.get_setting('alpaca_base_url') or 'https://paper-api.alpaca.markets'\n","\n","        self.alpaca_api = tradeapi.REST(\n","            self.alpaca_api_key,\n","            self.alpaca_secret_key,\n","            self.alpaca_base_url\n","        )\n","        print(\"Alpaca API initialized.\")\n","\n","    def initialize_interactive_brokers(self):\n","        # Placeholder for Interactive Brokers initialization\n","        print(\"Interactive Brokers API initialization not implemented yet.\")\n","\n","    def execute_trades(self, trade_orders):\n","        if self.broker == 'alpaca':\n","            self.execute_alpaca_trades(trade_orders)\n","        elif self.broker == 'interactive_brokers':\n","            self.execute_ib_trades(trade_orders)\n","\n","    def execute_alpaca_trades(self, trade_orders):\n","        # trade_orders is a list of dictionaries with trade details\n","        for order in trade_orders:\n","            symbol = order['symbol']\n","            qty = order['qty']\n","            side = order['side']  # 'buy' or 'sell'\n","            order_type = order.get('type', 'market')  # default to market order\n","            time_in_force = order.get('time_in_force', 'gtc')  # good till canceled\n","\n","            try:\n","                self.alpaca_api.submit_order(\n","                    symbol=symbol,\n","                    qty=qty,\n","                    side=side,\n","                    type=order_type,\n","                    time_in_force=time_in_force\n","                )\n","                print(f\"Order submitted: {side} {qty} shares of {symbol}\")\n","            except Exception as e:\n","                print(f\"Error submitting order for {symbol}: {e}\")\n","\n","    def execute_ib_trades(self, trade_orders):\n","        # Placeholder for Interactive Brokers trade execution\n","        print(\"Interactive Brokers trade execution not implemented yet.\")\n"],"metadata":{"id":"kmrKgMEanbp_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["7.2. Test the TradeExecutor"],"metadata":{"id":"v9jgmUVUnmPW"}},{"cell_type":"code","source":["trade_executor = TradeExecutor(broker='alpaca')\n","\n","# Sample trade order\n","trade_orders = [\n","    {\n","        'symbol': 'AAPL',\n","        'qty': 1,\n","        'side': 'buy',\n","        'type': 'market',\n","        'time_in_force': 'gtc'\n","    }\n","]\n","\n","trade_executor.execute_trades(trade_orders)\n"],"metadata":{"id":"vHJCAgaYnlCr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Step 8: TradeManager Class"],"metadata":{"id":"6wpl0srmoK_3"}},{"cell_type":"code","source":["class TradeManager:\n","    def __init__(self, trade_executor):\n","        self.trade_executor = trade_executor\n","\n","    def trigger_buy_sell_orders(self, signals):\n","        # signals is a list of dictionaries with trade signals\n","        trade_orders = []\n","        for signal in signals:\n","            # Assuming signal contains 'symbol', 'signal' (1 for buy, -1 for sell), and 'confidence'\n","            symbol = signal['symbol']\n","            action = 'buy' if signal['signal'] == 1 else 'sell'\n","            qty = signal.get('qty', 1)  # Default to 1 share\n","            trade_order = {\n","                'symbol': symbol,\n","                'qty': qty,\n","                'side': action,\n","                'type': 'market',\n","                'time_in_force': 'gtc'\n","            }\n","            trade_orders.append(trade_order)\n","        # Execute trades\n","        self.trade_executor.execute_trades(trade_orders)\n"],"metadata":{"id":"Vv1crTL9oH0v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["8.2. Test the TradeManager"],"metadata":{"id":"7ZsKkH5noTjR"}},{"cell_type":"code","source":["trade_manager = TradeManager(trade_executor)\n","\n","# Sample signals\n","signals = [\n","    {'symbol': 'AAPL', 'signal': 1, 'confidence': 0.8},\n","    {'symbol': 'GOOGL', 'signal': -1, 'confidence': 0.7}\n","]\n","\n","trade_manager.trigger_buy_sell_orders(signals)\n"],"metadata":{"id":"BzEprTK0oVB2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Step 9: Backtester Class"],"metadata":{"id":"kW3ov33soq8E"}},{"cell_type":"code","source":["class Backtester:\n","    def __init__(self):\n","        pass\n","\n","    def run_backtests(self, data):\n","        # Assume 'data' is a DataFrame with signals\n","        # Simulate trading based on signals\n","        initial_capital = 10000  # Starting capital\n","        shares = 0\n","        cash = initial_capital\n","        portfolio_values = []\n","\n","        for index, row in data.iterrows():\n","            price = row['Close']\n","            signal = row.get('Signal', 0)\n","            if signal == 1 and cash >= price:\n","                # Buy signal\n","                shares_to_buy = int(cash / price)\n","                cash -= shares_to_buy * price\n","                shares += shares_to_buy\n","                print(f\"Bought {shares_to_buy} shares at {price:.2f}\")\n","            elif signal == -1 and shares > 0:\n","                # Sell signal\n","                cash += shares * price\n","                print(f\"Sold {shares} shares at {price:.2f}\")\n","                shares = 0\n","            portfolio_value = cash + shares * price\n","            portfolio_values.append(portfolio_value)\n","\n","        # Calculate performance metrics\n","        total_return = (portfolio_values[-1] - initial_capital) / initial_capital * 100\n","        print(f\"Total Return: {total_return:.2f}%\")\n"],"metadata":{"id":"Emiz-s6bounj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Now test the Backtester:"],"metadata":{"id":"_XfRjRqepBBu"}},{"cell_type":"code","source":["backtester = Backtester()\n","for asset in top_assets:\n","    print(f\"Asset: {asset}, Type: {type(asset)}\")\n","    print(f\"Running backtest for {asset}\")\n","    data = pd.read_csv(f\"{asset}_price_data.csv\")\n","    data_with_signals = strategy_manager.strategy_macd_confluence(data)\n","    backtester.run_backtests(data_with_signals)\n"],"metadata":{"id":"2U5-9RWopCUS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Step 10: Logger Class"],"metadata":{"id":"p-Pj29FSpqx2"}},{"cell_type":"code","source":["import logging\n","\n","class Logger:\n","    def __init__(self, log_file='application.log'):\n","        logging.basicConfig(\n","            filename=log_file,\n","            filemode='a',\n","            format='%(asctime)s - %(levelname)s - %(message)s',\n","            level=logging.INFO\n","        )\n","        self.logger = logging.getLogger()\n","\n","    def log_message(self, message, level='info'):\n","        if level == 'info':\n","            self.logger.info(message)\n","        elif level == 'error':\n","            self.logger.error(message)\n","        elif level == 'warning':\n","            self.logger.warning(message)\n","        elif level == 'debug':\n","            self.logger.debug(message)\n"],"metadata":{"id":"vibETfkzpnSv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["test the logger"],"metadata":{"id":"zsu3i4S2pxlL"}},{"cell_type":"code","source":["logger = Logger()\n","logger.log_message(\"This is an informational message.\")\n","logger.log_message(\"This is an error message.\", level='error')\n"],"metadata":{"id":"B6FZKM0NpzF8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Step 11: ErrorHandler Class"],"metadata":{"id":"egrHWQ6np2f8"}},{"cell_type":"code","source":["class ErrorHandler:\n","    def __init__(self, logger):\n","        self.logger = logger\n","\n","    def handle_error(self, error):\n","        error_message = str(error)\n","        self.logger.log_message(f\"Error occurred: {error_message}\", level='error')\n","        # Implement additional error handling logic if needed\n"],"metadata":{"id":"vgKjQVNip5JF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["test error handler"],"metadata":{"id":"Hjo1uFgIp6_2"}},{"cell_type":"code","source":["error_handler = ErrorHandler(logger)\n","\n","try:\n","    # Code that may raise an exception\n","    1 / 0  # This will raise a ZeroDivisionError\n","except Exception as e:\n","    error_handler.handle_error(e)\n"],"metadata":{"id":"fbVTfMkCp74S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Main\n","Once individual classes are implemented and tested, integrate them in your Main class or script."],"metadata":{"id":"zoGPwsvINps2"}},{"cell_type":"code","source":["def main():\n","    # Initialize Logger\n","    logger = Logger()\n","\n","    # Initialize ErrorHandler\n","    error_handler = ErrorHandler(logger)\n","\n","    # Initialize ConfigurationManager\n","    config_manager = ConfigurationManager()\n","\n","    # Authenticate Google APIs\n","    google_auth = GoogleAPIAuthenticator()\n","\n","    # Initialize DataRetriever and DataProcessor\n","    data_retriever = DataRetriever(google_auth)\n","    spreadsheet_id = get_or_create_spreadsheet(google_auth, 'Price History')\n","    data_processor = DataProcessor(data_retriever, google_auth, spreadsheet_id)\n","\n","    # Get active strategies based on configuration\n","    active_strategies = config_manager.get_active_strategies('backtesting')  # Modify as needed for different modes\n","\n","    # Process each active strategy\n","    for strategy in active_strategies:\n","        asset = strategy.get('asset')\n","        try:\n","            data_processor.upsert_price_data(asset)\n","            data_processor.calculate_indicators(asset)\n","        except Exception as e:\n","            error_handler.handle_error(e)\n","\n","    # Initialize StrategyManager\n","    strategy_manager = StrategyManager(config_manager, data_processor)\n","\n","    # Initialize Backtester\n","    backtester = Backtester()\n","\n","    # Execute strategies\n","    try:\n","        strategy_manager.process_backtesting()\n","        # Implement process_live_strategies and process_paper_trades similarly\n","    except Exception as e:\n","        error_handler.handle_error(e)\n","\n","    # Initialize TradeExecutor and TradeManager with ConfigurationManager\n","    trade_executor = TradeExecutor(broker='alpaca', config_manager=config_manager)\n","    trade_manager = TradeManager(trade_executor)\n","\n","    # Generate signals for live trading\n","    signals = []  # Generate or retrieve signals for live trading\n","    try:\n","        trade_manager.trigger_buy_sell_orders(signals)\n","    except Exception as e:\n","        error_handler.handle_error(e)\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n","\n","def get_or_create_spreadsheet(google_authenticator, spreadsheet_name):\n","    # Check if spreadsheet exists; if not, create it\n","    drive_service = google_authenticator.drive_service\n","    sheets_service = google_authenticator.sheets_service\n","\n","    # Search for the spreadsheet by name\n","    results = drive_service.files().list(\n","        q=f\"name='{spreadsheet_name}' and mimeType='application/vnd.google-apps.spreadsheet'\",\n","        spaces='drive',\n","        fields='files(id, name)'\n","    ).execute()\n","    items = results.get('files', [])\n","\n","    if items:\n","        # Spreadsheet exists\n","        spreadsheet_id = items[0]['id']\n","        print(f\"Found existing spreadsheet: {spreadsheet_name} (ID: {spreadsheet_id})\")\n","    else:\n","        # Create a new spreadsheet\n","        spreadsheet = {\n","            'properties': {\n","                'title': spreadsheet_name\n","            }\n","        }\n","        spreadsheet = sheets_service.spreadsheets().create(body=spreadsheet,\n","                                                          fields='spreadsheetId').execute()\n","        spreadsheet_id = spreadsheet.get('spreadsheetId')\n","        print(f\"Created new spreadsheet: {spreadsheet_name} (ID: {spreadsheet_id})\")\n","\n","    return spreadsheet_id\n"],"metadata":{"id":"JsmYLKrfPBQk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def main():\n","    # Initialize Logger\n","    logger = Logger()\n","\n","    # Initialize ErrorHandler\n","    error_handler = ErrorHandler(logger)\n","\n","    # Initialize ConfigurationManager\n","    config_manager = ConfigurationManager()\n","\n","    # Authenticate Google APIs\n","    google_auth = GoogleAPIAuthenticator()\n","\n","    # Initialize DataRetriever and DataProcessor\n","    data_retriever = DataRetriever(google_auth)\n","    spreadsheet_id = get_or_create_spreadsheet(google_auth, 'Price History')\n","    data_processor = DataProcessor(data_retriever, google_auth, spreadsheet_id)\n","\n","    # establish variable for 'assets'\n","\n","\n","    # In main function, loop over top_assets\n","    for asset in assets:\n","        try:\n","            data_processor.upsert_price_data(asset)\n","            # Optionally, adjust calculate_indicators to work with combined data\n","            # data_processor.calculate_indicators(asset)\n","        except Exception as e:\n","            error_handler.handle_error(e)\n","\n","    # Initialize StrategyManager\n","    strategy_manager = StrategyManager(config_manager, data_processor)\n","\n","    # Initialize Backtester\n","    backtester = Backtester()\n","\n","    # Execute strategies\n","    try:\n","        strategy_manager.process_backtesting()\n","        # Implement process_live_strategies and process_paper_trades similarly\n","    except Exception as e:\n","        error_handler.handle_error(e)\n","\n","    # Initialize TradeExecutor and TradeManager\n","    trade_executor = TradeExecutor(broker='alpaca')\n","    trade_manager = TradeManager(trade_executor)\n","\n","    # Generate signals for live trading\n","    signals = []  # Generate or retrieve signals for live trading\n","    try:\n","        trade_manager.trigger_buy_sell_orders(signals)\n","    except Exception as e:\n","        error_handler.handle_error(e)\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n","\n","def get_or_create_spreadsheet(google_authenticator, spreadsheet_name):\n","    # Check if spreadsheet exists; if not, create it\n","    drive_service = google_authenticator.drive_service\n","    sheets_service = google_authenticator.sheets_service\n","\n","    # Search for the spreadsheet by name\n","    results = drive_service.files().list(\n","        q=f\"name='{spreadsheet_name}' and mimeType='application/vnd.google-apps.spreadsheet'\",\n","        spaces='drive',\n","        fields='files(id, name)'\n","    ).execute()\n","    items = results.get('files', [])\n","\n","    if items:\n","        # Spreadsheet exists\n","        spreadsheet_id = items[0]['id']\n","        print(f\"Found existing spreadsheet: {spreadsheet_name} (ID: {spreadsheet_id})\")\n","    else:\n","        # Create a new spreadsheet\n","        spreadsheet = {\n","            'properties': {\n","                'title': spreadsheet_name\n","            }\n","        }\n","        spreadsheet = sheets_service.spreadsheets().create(body=spreadsheet,\n","                                                          fields='spreadsheetId').execute()\n","        spreadsheet_id = spreadsheet.get('spreadsheetId')\n","        print(f\"Created new spreadsheet: {spreadsheet_name} (ID: {spreadsheet_id})\")\n","\n","    return spreadsheet_id\n"],"metadata":{"id":"uf0CTp8WNu2n","colab":{"base_uri":"https://localhost:8080/","height":703},"executionInfo":{"status":"error","timestamp":1733030320033,"user_tz":300,"elapsed":234,"user":{"displayName":"Blake Kelly","userId":"16528286487670311282"}},"outputId":"ff0e48f4-67d1-4a0c-dfed-835dce57df28"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Configuration loaded successfully.\n","Google APIs authenticated and services built.\n","Existing data found for AAPL up to 2020-04-09 00:00:00\n","Fetching price data for AAPL\n","Price data for AAPL upserted successfully.\n","Technical indicators calculated for AAPL.\n","Existing data found for GOOGL up to 2020-04-09 00:00:00\n","Fetching price data for GOOGL\n","Price data for GOOGL upserted successfully.\n","Technical indicators calculated for GOOGL.\n","Existing data found for MSFT up to 2020-04-09 00:00:00\n","Fetching price data for MSFT\n","Price data for MSFT upserted successfully.\n","Technical indicators calculated for MSFT.\n","Existing data found for AMZN up to 2020-04-09 00:00:00\n","Fetching price data for AMZN\n","Price data for AMZN upserted successfully.\n","Technical indicators calculated for AMZN.\n","Existing data found for FB up to 2020-04-09 00:00:00\n","Fetching price data for FB\n","Price data for FB upserted successfully.\n","Technical indicators calculated for FB.\n"]},{"output_type":"error","ename":"TypeError","evalue":"StrategyManager() takes no arguments","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-27-29ed74c8379b>\u001b[0m in \u001b[0;36m<cell line: 53>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-27-29ed74c8379b>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0;31m# Initialize StrategyManager\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m     \u001b[0mstrategy_manager\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStrategyManager\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig_manager\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_processor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m     \u001b[0;31m# Initialize Backtester\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: StrategyManager() takes no arguments"]}]}]}